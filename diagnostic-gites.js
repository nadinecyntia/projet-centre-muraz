const axios = require('axios');
const koboConfig = require('./config/kobo-config.js');

async function diagnosticGites() {
    try {
        console.log('üîç Diagnostic du formulaire G√Ætes...\n');
        
        // 1. V√©rifier la configuration
        console.log('1Ô∏è‚É£ Configuration KoboCollect:');
        console.log('   API URL:', koboConfig.apiUrl);
        console.log('   API Token:', koboConfig.apiToken ? '‚úÖ Pr√©sent' : '‚ùå Manquant');
        console.log('   Form G√Ætes ID:', koboConfig.forms.gites);
        
        // 2. Test de connexion √† l'API KoboCollect
        console.log('\n2Ô∏è‚É£ Test de connexion √† l\'API KoboCollect...');
        try {
            const testResponse = await axios.get(`${koboConfig.apiUrl}/forms`, {
                headers: {
                    'Authorization': `Token ${koboConfig.apiToken}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚úÖ Connexion API r√©ussie');
            console.log('   Nombre de formulaires:', testResponse.data.length);
        } catch (error) {
            console.log('‚ùå Erreur de connexion:', error.response?.status, error.response?.statusText);
            console.log('   Message:', error.response?.data?.detail || error.message);
        }
        
        // 3. Test sp√©cifique du formulaire G√Ætes
        console.log('\n3Ô∏è‚É£ Test du formulaire G√Ætes...');
        try {
            const formResponse = await axios.get(`${koboConfig.apiUrl}/forms/${koboConfig.forms.gites}`, {
                headers: {
                    'Authorization': `Token ${koboConfig.apiToken}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚úÖ Formulaire G√Ætes trouv√©');
            console.log('   Nom:', formResponse.data.name);
            console.log('   Champs:', Object.keys(formResponse.data.content?.survey || {}).length);
        } catch (error) {
            console.log('‚ùå Erreur formulaire G√Ætes:', error.response?.status, error.response?.statusText);
            console.log('   Message:', error.response?.data?.detail || error.message);
        }
        
        // 4. Test des soumissions du formulaire G√Ætes
        console.log('\n4Ô∏è‚É£ Test des soumissions G√Ætes...');
        try {
            const submissionsResponse = await axios.get(`${koboConfig.apiUrl}/forms/${koboConfig.forms.gites}/submissions`, {
                headers: {
                    'Authorization': `Token ${koboConfig.apiToken}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚úÖ Soumissions r√©cup√©r√©es');
            console.log('   Nombre de soumissions:', submissionsResponse.data.length);
            
            if (submissionsResponse.data.length > 0) {
                console.log('   Premi√®re soumission:', Object.keys(submissionsResponse.data[0]));
            }
        } catch (error) {
            console.log('‚ùå Erreur soumissions:', error.response?.status, error.response?.statusText);
            console.log('   Message:', error.response?.data?.detail || error.message);
        }
        
        // 5. Test de notre API de synchronisation
        console.log('\n5Ô∏è‚É£ Test de notre API de synchronisation...');
        try {
            const syncResponse = await axios.post('http://localhost:3000/api/sync-kobo/gites');
            console.log('‚úÖ Synchronisation G√Ætes:', syncResponse.data);
        } catch (error) {
            console.log('‚ùå Erreur synchronisation:', error.response?.status, error.response?.statusText);
            console.log('   Message:', error.response?.data || error.message);
        }
        
        console.log('\nüéØ Diagnostic termin√© !');
        
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
    }
}

diagnosticGites();
