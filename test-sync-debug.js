const axios = require('axios');
const { getFormConfig, validateFormData, mapKoboDataToDB } = require('./config/kobocollect-forms');

async function testSyncDebug() {
    try {
        console.log('üîç Test de debug de la synchronisation...\n');
        
        const token = 'cc56673ccdce38c375bf491b06f6132ee289606e';
        const baseUrl = 'https://kf.kobotoolbox.org';
        
        // Test avec les donn√©es r√©elles de G√Ætes
        console.log('1Ô∏è‚É£ R√©cup√©ration des donn√©es G√Ætes...');
        const response = await axios.get(`${baseUrl}/api/v2/assets/auDtEVrCioE3PnjQ9VpC4C/data`, {
            headers: {
                'Authorization': `Token ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const submissions = response.data.results;
        console.log(`‚úÖ ${submissions.length} soumissions trouv√©es`);
        
        if (submissions.length > 0) {
            const submission = submissions[0];
            console.log('\n2Ô∏è‚É£ Analyse de la premi√®re soumission:');
            console.log('üìã Donn√©es brutes:', JSON.stringify(submission, null, 2));
            
            console.log('\n3Ô∏è‚É£ Test de validation:');
            const validation = validateFormData('gites', submission);
            console.log('‚úÖ Validation:', validation);
            
            if (validation.valid) {
                console.log('\n4Ô∏è‚É£ Test de mapping:');
                const mappedData = mapKoboDataToDB('gites', submission);
                console.log('‚úÖ Donn√©es mapp√©es:', JSON.stringify(mappedData, null, 2));
            } else {
                console.log('‚ùå Validation √©chou√©e:', validation.errors);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    }
}

testSyncDebug();
